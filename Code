#include <algorithm>
#include <cmath>
#include <iostream>
#include <SFML/Graphics.hpp>
//#include <vector> I dont even use this, though it could be helpful and more
// efficient to use though I would have to overhall the code to make it work

struct Vec {
  float x;
  float y;
};

struct Vec2 {
  float x;
  float y;
  float LengthSquared() { return x * x + y * y; }
  float Length() { return sqrt(LengthSquared()); }
};

struct Circle {
  float radius;
  Vec position;
};

struct AABB {
  Vec2 min;
  Vec2 max;
};

struct Object {
  Vec2 velocity;
  float restitution;
  float mass;
  float inv_mass;
  Vec2 position;
  AABB aabb;
  Circle radius;
  // Add other necessary members as needed
};

bool AABBvsAABB(AABB a, AABB b) {
  // Exit with no intersection if found separated along an axis
  if (a.max.x < b.min.x or a.min.x > b.max.x)
    return false;
  if (a.max.y < b.min.y or a.min.y > b.max.y)
    return false;
  // No separating axis found, therefore there is at least one overlapping axis
  return true;
};

float Distance(Vec2 a, Vec2 b) {
  return sqrt(pow(a.x - b.x, 2) + pow(a.y - b.y, 2));
}

bool CirclevsCircleUnoptimized(Circle a, Circle b) {
  float r = a.radius + b.radius;
  Vec2 aPos = {a.position.x, a.position.y}; // Create Vec2 from Vec
  Vec2 bPos = {b.position.x, b.position.y}; // Create Vec2 from Vec
  return r < Distance(aPos, bPos);
}

bool CirclevsCircleOptimized(Circle a, Circle b) {
  float r = a.radius + b.radius;
  r *= r;
  return r < (a.position.x - b.position.x) * (a.position.x - b.position.x) +
                 (a.position.y - b.position.y) * (a.position.y - b.position.y);
}

// Object X {{velocity}, restitution, mass, inv_mass= 1/mass}

Object A = {{10, 0}, 0.8f, 2.0f, 1 / A.mass};

Object B = {{10, 0}, 0.8f, 2.0f, 1 / B.mass};

// Given two objects A and B
float e = std::min(A.restitution, B.restitution);

float DotProduct(Vec2 a, Vec2 b) { return a.x * b.x + a.y * b.y; }

float penetration;

Vec2 n;

void ResolveCollision(Object A, Object B, Vec2 normal) {
  // Calculate relative velocity
  Vec2 rv = {B.velocity.x - A.velocity.x, B.velocity.y - A.velocity.y};
  // Calculate relative velocity in terms of the normal direction
  float velAlongNormal = DotProduct(rv, normal);
  // Do not resolve if velocities are separating
  if (velAlongNormal > 0)
    return;
  // Calculate restitution
  float e = std::min(A.restitution, B.restitution);
  // Calculate impulse scalar
  float j = -(1 + e) * velAlongNormal;
  j /= 1 / A.mass + 1 / B.mass;
  // Apply impulse
  Vec2 impulse = {j * normal.x, j * normal.y};
  A.velocity.x -= 1 / A.mass * impulse.x;
  A.velocity.y -= 1 / A.mass * impulse.y;
  B.velocity.x += 1 / B.mass * impulse.x;
  B.velocity.y += 1 / B.mass * impulse.y;

  float mass_sum = A.mass + B.mass;
  float ratio = A.mass / mass_sum;
  A.velocity.x -= ratio * impulse.x;
  A.velocity.y -= ratio * impulse.y;
  ratio = B.mass / mass_sum;
  B.velocity.x += ratio * impulse.x;
  B.velocity.y += ratio * impulse.y;

  penetration = std::abs(DotProduct(
      normal, {A.position.x - B.position.x, A.position.y - B.position.y}));

  n = normal;
}

void PositionalCorrection(Object A, Object B) {
  if (A.mass == 0)
    A.inv_mass = 0;
  else
    A.inv_mass = 1 / A.mass;

  const float percent = 0.2; // usually 20% to 80%
  const float slop = 0.01;   // usually 0.01 to 0.1
  Vec2 correction = {
      static_cast<float>(fmax(penetration - slop, 0.0f) /
                         (A.inv_mass + B.inv_mass) * percent * n.x),
      static_cast<float>(fmax(penetration - slop, 0.0f) /
                         (A.inv_mass + B.inv_mass) * percent * n.y)};
  A.position.x -= A.inv_mass * correction.x;
  A.position.y -= A.inv_mass * correction.y;
  B.position.x += B.inv_mass * correction.x;
  B.position.y += B.inv_mass * correction.y;
}

struct Manifold {
  Object *A;
  Object *B;
  float penetration;
  Vec2 normal;
};

bool CirclevsCircle(Manifold *m) {

  // Setup a couple pointers to each object
  Object *A = m->A;
  Object *B = m->B;
  // Vector from A to B
  Vec2 n = {B->position.x - A->position.x, B->position.y - A->position.y};
  float r = ((Circle *)A)->radius + ((Circle *)B)->radius;
  r *= r;
  if (n.LengthSquared() > r)
    return false;
  // Circles have collided, now compute manifold
  float d = n.Length(); // perform actual sqrt
  // If distance between circles is not zero
  if (d != 0) {
    // Distance is difference between radius and distance
    m->penetration = r - d;
    // Utilize our d since we performed sqrt on it already within Length( )
    // Points from A to B, and is a unit vector
    m->normal.x = n.x / d;
    m->normal.y = n.y / d;
    return true;
  }
  // Circles are on same position
  else {
    // Choose random (but consistent) values
    m->penetration = ((Circle *)A)->radius;
    m->normal = Vec2{1, 0};
    return true;
  }
}

bool AABBvsAABB(Manifold *m) {
  // Setup a couple pointers to each object
  Object *A = m->A;
  Object *B = m->B;

  // Vector from A to B
  Vec2 n = {B->position.x - A->position.x, B->position.y - A->position.y};

  AABB abox = A->aabb;
  AABB bbox = B->aabb;

  // Calculate half extents along x axis for each object
  float a_extent = (abox.max.x - abox.min.x) / 2;
  float b_extent = (bbox.max.x - bbox.min.x) / 2;

  // Calculate overlap on x axis
  float x_overlap = a_extent + b_extent - std::abs(n.x);

  // SAT test on x axis
  if (x_overlap > 0) {
    // Calculate half extents along x axis for each object
    float a_extent = (abox.max.y - abox.min.y) / 2;
    float b_extent = (bbox.max.y - bbox.min.y) / 2;

    // Calculate overlap on y axis
    float y_overlap = a_extent + b_extent - std::abs(n.y);

    // SAT test on y axis
    if (y_overlap > 0) {
      // Find out which axis is axis of least penetration
      if (x_overlap > y_overlap) {
        // Point towards B knowing that n points from A to B
        if (n.x < 0)
          m->normal = Vec2{-1, 0};
        else
          m->normal = Vec2{0, 0};
        m->penetration = x_overlap;
        return true;
      } else {
        // Point toward B knowing that n points from A to B
        if (n.y < 0)
          m->normal = Vec2{0, -1};
        else
          m->normal = Vec2{0, 1};
        m->penetration = y_overlap;
        return true;
      }
    }
  }
  // If no collision is detected on either axis, return false
  return false;
}

template <typename T> T Clamp(T min, T max, T value) {
  return std::max(min, std::min(max, value));
}

bool AABBvsCircle(Manifold *m) {
  // Setup a couple pointers to each object
  Object *A = m->A;
  Object *B = m->B;
  // Vector from A to B
  Vec2 n = {B->position.x - A->position.x, B->position.y - A->position.y};
  // Closest point on A to center of B
  Vec2 closest = n;
  // Calculate half extents along each axis
  float x_extent = (A->aabb.max.x - A->aabb.min.x) / 2;
  float y_extent = (A->aabb.max.y - A->aabb.min.y) / 2;
  // Clamp point to edges of the AABB
  closest.x = Clamp(-x_extent, x_extent, closest.x);
  closest.y = Clamp(-y_extent, y_extent, closest.y);
  bool inside = false;
  // Circle is inside the AABB, so we need to clamp the circle's center
  // to the closest edge
  if (n.x == closest.x && n.y == closest.y) {
    {
      inside = true;
      // Find closest axis
      if (std::abs(n.x) > std::abs(n.y)) {
        // Clamp to closest extent
        if (closest.x > 0)
          closest.x = x_extent;
        else
          closest.x = -x_extent;
      }
      // y axis is shorter
      else {
        // Clamp to closest extent
        if (closest.y > 0)
          closest.y = y_extent;
        else
          closest.y = -y_extent;
      }
    }
    Vec2 normal = {n.x - closest.x, n.y - closest.y};
    float d = normal.LengthSquared();
    float r = ((Circle *)B)->radius;
    // Early out of the radius is shorter than distance to closest point and
    // Circle not inside the AABB
    if (d > r * r && !inside)
      return false;
    // Avoided sqrt until we needed
    d = sqrt(d);
    // Collision normal needs to be flipped to point outside if circle was
    // inside the AABB
    if (inside) {
      m->normal.x = -n.x;
      m->normal.y = -n.y;
      m->penetration = r - d;
    } else {
      m->normal = n;
      m->penetration = r - d;
    }
    return true;
  }
}


  int main() {
    // Create a window
    sf::RenderWindow window(sf::VideoMode(800, 600), "My Window");
    // Create a circle shape
    sf::CircleShape circle(50.f);
    circle.setFillColor(sf::Color::Red);
    // Main game loop
    while (window.isOpen()) {
      // Process events
      sf::Event event;
      while (window.pollEvent(event)) {
        if (event.type == sf::Event::Closed)
          window.close();
      }
      // Clear the window
      window.clear(sf::Color::Black);
      // Draw the circle
      window.draw(circle);
      // Display the window
      window.display();
    }
    return 0;
  }




  
}
