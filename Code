#include <cmath>
#include <>

struct Vec
{
  float x;
  float y;
};

struct Vec2 {
  float x;
  float y;
};

struct Circle
{
  float radius;
  Vec position;
};



struct AABB
{
  Vec2 min;
  Vec2 max;
}; 


bool AABBvsAABB( AABB a, AABB b )
{
  // Exit with no intersection if found separated along an axis 
  if(a.max.x < b.min.x or a.min.x > b.max.x) return false;
  if(a.max.y < b.min.y or a.min.y > b.max.y) return false;
  // No separating axis found, therefor there is at least one overlapping axis 
  return true;
};



class Distance {
public:
  Distance(Vec2 a, Vec2 b) { // Constructor
    this->a = a;
    this->b = b;
  }

  float calculateDistance() { // Method to calculate distance
    return sqrt(pow(a.x - b.x, 2) + pow(a.y - b.y, 2));
  }
private:
  Vec2 a;
  Vec2 b;
};




float Distance(Vec2 a, Vec2 b) {
  return sqrt(pow(a.x - b.x, 2) + pow(a.y - b.y, 2));
}

bool CirclevsCircleUnoptimized( Circle a, Circle b )
{
  float r = a.radius + b.radius;  
  return r < Distance( a.position, b.position );
}
bool CirclevsCircleOptimized( Circle a, Circle b )
{
  float r = a.radius + b.radius;
  r *= r;
  return r < (a.position.x - b.position.x)*(a.position.x - b.position.x) + (a.position.y - b.position.y)*(a.position.y - b.position.y);
}



// bool CirclevsCircleOptimized( Circle a, Circle b )
// {
//   float r = a.radius + b.radius;
//   r *= r
//   return r < (a.x + b.x)^2 + (a.y + b.y)^2
// } 
